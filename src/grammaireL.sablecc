Package sc;


Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];



Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
plus = '+';
minus = '-';
mult = '*';
div = '/';
l_par = '(';
r_par = ')';
l_brac = '[';
r_brac = ']';
l_curbrac = '{';
r_curbrac = '}';
or = '|';
and = '&';
equals = '=';
inf = '<';
not = '!';
comma = ',';
semicolon = ';';
int = 'entier';
if = 'si';
then = 'alors';
else = 'sinon';
while = 'tantque';
do = 'faire';
return = 'retour';
read = 'lire';
write = 'ecrire';
number = ['0' .. '9']+;
id = (lettre | '$' | '_')(lettre | '$' | '_' | ['0' .. '9']+)*;



Ignored Tokens

espaces, commentaire;



Productions

program =
    {optvardeclist} optvardeclist foncdeclist |
    {foncdeclist} foncdeclist;

optvardeclist = vardeclist semicolon;

foncdeclist =
    {oneormore} foncdec foncdeclist |
    {last} ;
foncdec =
    {withvardec} id paramlist optvardeclist instrbloc |
    {novardec} id paramlist instrbloc;
paramlist =
    {withparam} l_par vardeclist r_par |
    {withoutparam} l_par r_par;

vardeclist =
    {morethanone} vardec vardeclistbis |
    {one} vardec;
vardeclistbis =
    {more} comma vardec vardeclistbis |
    {last} comma vardec;
vardec =
    {int} int id |
    {inttable} int id l_brac number r_brac;
var =
    {var} id |
    {table} id l_brac exp r_brac;

exp =
    {or} exp or exp1 |
    {exp1} exp1;
exp1 =
    {and} exp1 and exp2 |
    {exp2} exp2;
exp2 =
    {equals} exp2 equals exp3 |
    {inf} exp2 inf exp3 |
    {exp3} exp3;
exp3 =
    {plus} exp3 plus exp4 |
    {minus} exp3 minus exp4 |
    {exp4} exp4;
exp4 =
    {mult} exp4 mult exp5 |
    {div} exp4 div exp5 |
    {exp5} exp5;
exp5 =
    {not} not exp5 |
    {parenthesis} l_par exp r_par |
    {number} number |
    {call} call |
    {var} var |
    {read} read l_par r_par;
listofexp =
    {morethanone} exp listofexpbis |
    {none} ;
listofexpbis =
    {more} comma exp listofexpbis |
    {last} ;

instr =
    {assinstr} assinstr |
    {ifinstr} ifinstr |
    {whileinstr} whileinstr |
    {callinstr} callinstr |
    {retinstr} retinstr |
    {writeinstr} writeinstr |
    {emptyinstr} emptyinstr |
    {instrbloc} instrbloc ;
assinstr = var equals exp semicolon;
ifinstr =
    {ifthen} if exp then instrbloc |
    {ifthenelse} if exp then instrbloc elseinstr;
elseinstr = else instrbloc;
whileinstr = while exp do instrbloc;
callinstr = call semicolon;
call = id l_par listofexp r_par;
retinstr = return exp semicolon;
writeinstr = write l_par exp r_par semicolon;
emptyinstr = semicolon;
instrbloc = l_curbrac instrblocbis r_curbrac;
instrblocbis =
    {instr} instr instrblocbis |
    {noinstr} ;
