/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AOneormoreFoncdeclist extends PFoncdeclist
{
    private PFoncdec _foncdec_;
    private PFoncdeclist _foncdeclist_;

    public AOneormoreFoncdeclist()
    {
        // Constructor
    }

    public AOneormoreFoncdeclist(
        @SuppressWarnings("hiding") PFoncdec _foncdec_,
        @SuppressWarnings("hiding") PFoncdeclist _foncdeclist_)
    {
        // Constructor
        setFoncdec(_foncdec_);

        setFoncdeclist(_foncdeclist_);

    }

    @Override
    public Object clone()
    {
        return new AOneormoreFoncdeclist(
            cloneNode(this._foncdec_),
            cloneNode(this._foncdeclist_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOneormoreFoncdeclist(this);
    }

    public PFoncdec getFoncdec()
    {
        return this._foncdec_;
    }

    public void setFoncdec(PFoncdec node)
    {
        if(this._foncdec_ != null)
        {
            this._foncdec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foncdec_ = node;
    }

    public PFoncdeclist getFoncdeclist()
    {
        return this._foncdeclist_;
    }

    public void setFoncdeclist(PFoncdeclist node)
    {
        if(this._foncdeclist_ != null)
        {
            this._foncdeclist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foncdeclist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._foncdec_)
            + toString(this._foncdeclist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._foncdec_ == child)
        {
            this._foncdec_ = null;
            return;
        }

        if(this._foncdeclist_ == child)
        {
            this._foncdeclist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._foncdec_ == oldChild)
        {
            setFoncdec((PFoncdec) newChild);
            return;
        }

        if(this._foncdeclist_ == oldChild)
        {
            setFoncdeclist((PFoncdeclist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
