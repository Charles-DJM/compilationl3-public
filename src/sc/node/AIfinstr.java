/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AIfinstr extends PIfinstr
{
    private TIf _if_;
    private PExp _exp_;
    private TThen _then_;
    private PInstrbloc _instrbloc_;
    private PIfinstrbis _ifinstrbis_;

    public AIfinstr()
    {
        // Constructor
    }

    public AIfinstr(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PInstrbloc _instrbloc_,
        @SuppressWarnings("hiding") PIfinstrbis _ifinstrbis_)
    {
        // Constructor
        setIf(_if_);

        setExp(_exp_);

        setThen(_then_);

        setInstrbloc(_instrbloc_);

        setIfinstrbis(_ifinstrbis_);

    }

    @Override
    public Object clone()
    {
        return new AIfinstr(
            cloneNode(this._if_),
            cloneNode(this._exp_),
            cloneNode(this._then_),
            cloneNode(this._instrbloc_),
            cloneNode(this._ifinstrbis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfinstr(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PInstrbloc getInstrbloc()
    {
        return this._instrbloc_;
    }

    public void setInstrbloc(PInstrbloc node)
    {
        if(this._instrbloc_ != null)
        {
            this._instrbloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instrbloc_ = node;
    }

    public PIfinstrbis getIfinstrbis()
    {
        return this._ifinstrbis_;
    }

    public void setIfinstrbis(PIfinstrbis node)
    {
        if(this._ifinstrbis_ != null)
        {
            this._ifinstrbis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifinstrbis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._exp_)
            + toString(this._then_)
            + toString(this._instrbloc_)
            + toString(this._ifinstrbis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._instrbloc_ == child)
        {
            this._instrbloc_ = null;
            return;
        }

        if(this._ifinstrbis_ == child)
        {
            this._ifinstrbis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._instrbloc_ == oldChild)
        {
            setInstrbloc((PInstrbloc) newChild);
            return;
        }

        if(this._ifinstrbis_ == oldChild)
        {
            setIfinstrbis((PIfinstrbis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
