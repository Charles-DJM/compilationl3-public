/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AInttableVardec extends PVardec
{
    private TInt _int_;
    private TId _id_;
    private TLBrac _lBrac_;
    private TNumber _number_;
    private TRBrac _rBrac_;

    public AInttableVardec()
    {
        // Constructor
    }

    public AInttableVardec(
        @SuppressWarnings("hiding") TInt _int_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLBrac _lBrac_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") TRBrac _rBrac_)
    {
        // Constructor
        setInt(_int_);

        setId(_id_);

        setLBrac(_lBrac_);

        setNumber(_number_);

        setRBrac(_rBrac_);

    }

    @Override
    public Object clone()
    {
        return new AInttableVardec(
            cloneNode(this._int_),
            cloneNode(this._id_),
            cloneNode(this._lBrac_),
            cloneNode(this._number_),
            cloneNode(this._rBrac_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInttableVardec(this);
    }

    public TInt getInt()
    {
        return this._int_;
    }

    public void setInt(TInt node)
    {
        if(this._int_ != null)
        {
            this._int_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._int_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLBrac getLBrac()
    {
        return this._lBrac_;
    }

    public void setLBrac(TLBrac node)
    {
        if(this._lBrac_ != null)
        {
            this._lBrac_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrac_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TRBrac getRBrac()
    {
        return this._rBrac_;
    }

    public void setRBrac(TRBrac node)
    {
        if(this._rBrac_ != null)
        {
            this._rBrac_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrac_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._int_)
            + toString(this._id_)
            + toString(this._lBrac_)
            + toString(this._number_)
            + toString(this._rBrac_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._int_ == child)
        {
            this._int_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lBrac_ == child)
        {
            this._lBrac_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._rBrac_ == child)
        {
            this._rBrac_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._int_ == oldChild)
        {
            setInt((TInt) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lBrac_ == oldChild)
        {
            setLBrac((TLBrac) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._rBrac_ == oldChild)
        {
            setRBrac((TRBrac) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
