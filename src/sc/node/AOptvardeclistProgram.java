/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AOptvardeclistProgram extends PProgram
{
    private POptvardeclist _optvardeclist_;
    private PFoncdeclist _foncdeclist_;

    public AOptvardeclistProgram()
    {
        // Constructor
    }

    public AOptvardeclistProgram(
        @SuppressWarnings("hiding") POptvardeclist _optvardeclist_,
        @SuppressWarnings("hiding") PFoncdeclist _foncdeclist_)
    {
        // Constructor
        setOptvardeclist(_optvardeclist_);

        setFoncdeclist(_foncdeclist_);

    }

    @Override
    public Object clone()
    {
        return new AOptvardeclistProgram(
            cloneNode(this._optvardeclist_),
            cloneNode(this._foncdeclist_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOptvardeclistProgram(this);
    }

    public POptvardeclist getOptvardeclist()
    {
        return this._optvardeclist_;
    }

    public void setOptvardeclist(POptvardeclist node)
    {
        if(this._optvardeclist_ != null)
        {
            this._optvardeclist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._optvardeclist_ = node;
    }

    public PFoncdeclist getFoncdeclist()
    {
        return this._foncdeclist_;
    }

    public void setFoncdeclist(PFoncdeclist node)
    {
        if(this._foncdeclist_ != null)
        {
            this._foncdeclist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foncdeclist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._optvardeclist_)
            + toString(this._foncdeclist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._optvardeclist_ == child)
        {
            this._optvardeclist_ = null;
            return;
        }

        if(this._foncdeclist_ == child)
        {
            this._foncdeclist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._optvardeclist_ == oldChild)
        {
            setOptvardeclist((POptvardeclist) newChild);
            return;
        }

        if(this._foncdeclist_ == oldChild)
        {
            setFoncdeclist((PFoncdeclist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
