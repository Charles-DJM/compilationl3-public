/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AOptvardeclistProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AFoncdeclistProgram */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AOptvardeclist */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AOneormoreFoncdeclist */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ALastFoncdeclist */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AWithvardecFoncdec */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ANovardecFoncdec */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AWithparamParamlist */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AWithoutparamParamlist */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AMorethanoneVardeclist */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AOneVardeclist */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AMoreVardeclistbis */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ALastVardeclistbis */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AIntVardec */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AInttableVardec */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AVarVar */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ATableVar */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AOrExp */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AExp1Exp */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AAndExp1 */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AExp2Exp1 */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AEqualsExp2 */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce AInfExp2 */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce AExp3Exp2 */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce APlusExp3 */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AMinusExp3 */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AExp4Exp3 */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AMultExp4 */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ADivExp4 */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce AExp5Exp4 */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce ANotExp5 */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AParenthesisExp5 */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce ANumberExp5 */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce ACallExp5 */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AVarExp5 */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce AReadExp5 */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AMorethanoneListofexp */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce ANoneListofexp */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AMoreListofexpbis */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce ALastListofexpbis */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AAssinstrInstr */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list, false);
            }
            break;
            case 41: /* reduce AIfinstrInstr */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list, false);
            }
            break;
            case 42: /* reduce AWhileinstrInstr */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce ACallinstrInstr */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce ARetinstrInstr */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce AWriteinstrInstr */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
            case 46: /* reduce AEmptyinstrInstr */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list, false);
            }
            break;
            case 47: /* reduce AInstrblocInstr */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list, false);
            }
            break;
            case 48: /* reduce AAssinstr */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce AIfinstr */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list, false);
            }
            break;
            case 50: /* reduce AElseIfinstrbis */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list, false);
            }
            break;
            case 51: /* reduce ANoelseIfinstrbis */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce AWhileinstr */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list, false);
            }
            break;
            case 53: /* reduce ACallinstr */
            {
                ArrayList<Object> list = new53();
                push(goTo(22), list, false);
            }
            break;
            case 54: /* reduce ACall */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list, false);
            }
            break;
            case 55: /* reduce ARetinstr */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list, false);
            }
            break;
            case 56: /* reduce AWriteinstr */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list, false);
            }
            break;
            case 57: /* reduce AEmptyinstr */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list, false);
            }
            break;
            case 58: /* reduce AInstrbloc */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list, false);
            }
            break;
            case 59: /* reduce AInstrInstrblocbis */
            {
                ArrayList<Object> list = new59();
                push(goTo(28), list, false);
            }
            break;
            case 60: /* reduce ANoinstrInstrblocbis */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AOptvardeclistProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        POptvardeclist poptvardeclistNode2;
        PFoncdeclist pfoncdeclistNode3;
        poptvardeclistNode2 = (POptvardeclist)nodeArrayList1.get(0);
        pfoncdeclistNode3 = (PFoncdeclist)nodeArrayList2.get(0);

        pprogramNode1 = new AOptvardeclistProgram(poptvardeclistNode2, pfoncdeclistNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AFoncdeclistProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFoncdeclist pfoncdeclistNode2;
        pfoncdeclistNode2 = (PFoncdeclist)nodeArrayList1.get(0);

        pprogramNode1 = new AFoncdeclistProgram(pfoncdeclistNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AOptvardeclist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POptvardeclist poptvardeclistNode1;
        {
            // Block
        PVardeclist pvardeclistNode2;
        TSemicolon tsemicolonNode3;
        pvardeclistNode2 = (PVardeclist)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        poptvardeclistNode1 = new AOptvardeclist(pvardeclistNode2, tsemicolonNode3);
        }
	nodeList.add(poptvardeclistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AOneormoreFoncdeclist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFoncdeclist pfoncdeclistNode1;
        {
            // Block
        PFoncdec pfoncdecNode2;
        PFoncdeclist pfoncdeclistNode3;
        pfoncdecNode2 = (PFoncdec)nodeArrayList1.get(0);
        pfoncdeclistNode3 = (PFoncdeclist)nodeArrayList2.get(0);

        pfoncdeclistNode1 = new AOneormoreFoncdeclist(pfoncdecNode2, pfoncdeclistNode3);
        }
	nodeList.add(pfoncdeclistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ALastFoncdeclist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFoncdeclist pfoncdeclistNode1;
        {
            // Block

        pfoncdeclistNode1 = new ALastFoncdeclist();
        }
	nodeList.add(pfoncdeclistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AWithvardecFoncdec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFoncdec pfoncdecNode1;
        {
            // Block
        TId tidNode2;
        PParamlist pparamlistNode3;
        POptvardeclist poptvardeclistNode4;
        PInstrbloc pinstrblocNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pparamlistNode3 = (PParamlist)nodeArrayList2.get(0);
        poptvardeclistNode4 = (POptvardeclist)nodeArrayList3.get(0);
        pinstrblocNode5 = (PInstrbloc)nodeArrayList4.get(0);

        pfoncdecNode1 = new AWithvardecFoncdec(tidNode2, pparamlistNode3, poptvardeclistNode4, pinstrblocNode5);
        }
	nodeList.add(pfoncdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ANovardecFoncdec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFoncdec pfoncdecNode1;
        {
            // Block
        TId tidNode2;
        PParamlist pparamlistNode3;
        PInstrbloc pinstrblocNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pparamlistNode3 = (PParamlist)nodeArrayList2.get(0);
        pinstrblocNode4 = (PInstrbloc)nodeArrayList3.get(0);

        pfoncdecNode1 = new ANovardecFoncdec(tidNode2, pparamlistNode3, pinstrblocNode4);
        }
	nodeList.add(pfoncdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AWithparamParamlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamlist pparamlistNode1;
        {
            // Block
        TLPar tlparNode2;
        PVardeclist pvardeclistNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pvardeclistNode3 = (PVardeclist)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pparamlistNode1 = new AWithparamParamlist(tlparNode2, pvardeclistNode3, trparNode4);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AWithoutparamParamlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamlist pparamlistNode1;
        {
            // Block
        TLPar tlparNode2;
        TRPar trparNode3;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        trparNode3 = (TRPar)nodeArrayList2.get(0);

        pparamlistNode1 = new AWithoutparamParamlist(tlparNode2, trparNode3);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMorethanoneVardeclist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVardeclist pvardeclistNode1;
        {
            // Block
        PVardec pvardecNode2;
        PVardeclistbis pvardeclistbisNode3;
        pvardecNode2 = (PVardec)nodeArrayList1.get(0);
        pvardeclistbisNode3 = (PVardeclistbis)nodeArrayList2.get(0);

        pvardeclistNode1 = new AMorethanoneVardeclist(pvardecNode2, pvardeclistbisNode3);
        }
	nodeList.add(pvardeclistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AOneVardeclist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVardeclist pvardeclistNode1;
        {
            // Block
        PVardec pvardecNode2;
        pvardecNode2 = (PVardec)nodeArrayList1.get(0);

        pvardeclistNode1 = new AOneVardeclist(pvardecNode2);
        }
	nodeList.add(pvardeclistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMoreVardeclistbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVardeclistbis pvardeclistbisNode1;
        {
            // Block
        TComma tcommaNode2;
        PVardec pvardecNode3;
        PVardeclistbis pvardeclistbisNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvardecNode3 = (PVardec)nodeArrayList2.get(0);
        pvardeclistbisNode4 = (PVardeclistbis)nodeArrayList3.get(0);

        pvardeclistbisNode1 = new AMoreVardeclistbis(tcommaNode2, pvardecNode3, pvardeclistbisNode4);
        }
	nodeList.add(pvardeclistbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ALastVardeclistbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVardeclistbis pvardeclistbisNode1;
        {
            // Block
        TComma tcommaNode2;
        PVardec pvardecNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvardecNode3 = (PVardec)nodeArrayList2.get(0);

        pvardeclistbisNode1 = new ALastVardeclistbis(tcommaNode2, pvardecNode3);
        }
	nodeList.add(pvardeclistbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIntVardec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVardec pvardecNode1;
        {
            // Block
        TInt tintNode2;
        TId tidNode3;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardecNode1 = new AIntVardec(tintNode2, tidNode3);
        }
	nodeList.add(pvardecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AInttableVardec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVardec pvardecNode1;
        {
            // Block
        TInt tintNode2;
        TId tidNode3;
        TLBrac tlbracNode4;
        TNumber tnumberNode5;
        TRBrac trbracNode6;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbracNode4 = (TLBrac)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);
        trbracNode6 = (TRBrac)nodeArrayList5.get(0);

        pvardecNode1 = new AInttableVardec(tintNode2, tidNode3, tlbracNode4, tnumberNode5, trbracNode6);
        }
	nodeList.add(pvardecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AVarVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATableVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TLBrac tlbracNode3;
        PExp pexpNode4;
        TRBrac trbracNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbracNode3 = (TLBrac)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracNode5 = (TRBrac)nodeArrayList4.get(0);

        pvarNode1 = new ATableVar(tidNode2, tlbracNode3, pexpNode4, trbracNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOr torNode3;
        PExp1 pexp1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, torNode3, pexp1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExp1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp1 pexp1Node2;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);

        pexpNode1 = new AExp1Exp(pexp1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAndExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp1 pexp1Node2;
        TAnd tandNode3;
        PExp2 pexp2Node4;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp1Node1 = new AAndExp1(pexp1Node2, tandNode3, pexp2Node4);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExp2Exp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new AExp2Exp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AEqualsExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TEquals tequalsNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AEqualsExp2(pexp2Node2, tequalsNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AInfExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TInf tinfNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AInfExp2(pexp2Node2, tinfNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AExp3Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new AExp3Exp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APlusExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TPlus tplusNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new APlusExp3(pexp3Node2, tplusNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMinusExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TMinus tminusNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new AMinusExp3(pexp3Node2, tminusNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AExp4Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new AExp4Exp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMultExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TMult tmultNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new AMultExp4(pexp4Node2, tmultNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ADivExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TDiv tdivNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new ADivExp4(pexp4Node2, tdivNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AExp5Exp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);

        pexp4Node1 = new AExp5Exp4(pexp5Node2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANotExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TNot tnotNode2;
        PExp5 pexp5Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexp5Node3 = (PExp5)nodeArrayList2.get(0);

        pexp5Node1 = new ANotExp5(tnotNode2, pexp5Node3);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AParenthesisExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexp5Node1 = new AParenthesisExp5(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ANumberExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexp5Node1 = new ANumberExp5(tnumberNode2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ACallExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        pexp5Node1 = new ACallExp5(pcallNode2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVarExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexp5Node1 = new AVarExp5(pvarNode2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AReadExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexp5Node1 = new AReadExp5(treadNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMorethanoneListofexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListofexp plistofexpNode1;
        {
            // Block
        PExp pexpNode2;
        PListofexpbis plistofexpbisNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        plistofexpbisNode3 = (PListofexpbis)nodeArrayList2.get(0);

        plistofexpNode1 = new AMorethanoneListofexp(pexpNode2, plistofexpbisNode3);
        }
	nodeList.add(plistofexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANoneListofexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListofexp plistofexpNode1;
        {
            // Block

        plistofexpNode1 = new ANoneListofexp();
        }
	nodeList.add(plistofexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMoreListofexpbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListofexpbis plistofexpbisNode1;
        {
            // Block
        TComma tcommaNode2;
        PExp pexpNode3;
        PListofexpbis plistofexpbisNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        plistofexpbisNode4 = (PListofexpbis)nodeArrayList3.get(0);

        plistofexpbisNode1 = new AMoreListofexpbis(tcommaNode2, pexpNode3, plistofexpbisNode4);
        }
	nodeList.add(plistofexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALastListofexpbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListofexpbis plistofexpbisNode1;
        {
            // Block

        plistofexpbisNode1 = new ALastListofexpbis();
        }
	nodeList.add(plistofexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAssinstrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PAssinstr passinstrNode2;
        passinstrNode2 = (PAssinstr)nodeArrayList1.get(0);

        pinstrNode1 = new AAssinstrInstr(passinstrNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AIfinstrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PIfinstr pifinstrNode2;
        pifinstrNode2 = (PIfinstr)nodeArrayList1.get(0);

        pinstrNode1 = new AIfinstrInstr(pifinstrNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AWhileinstrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PWhileinstr pwhileinstrNode2;
        pwhileinstrNode2 = (PWhileinstr)nodeArrayList1.get(0);

        pinstrNode1 = new AWhileinstrInstr(pwhileinstrNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ACallinstrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PCallinstr pcallinstrNode2;
        pcallinstrNode2 = (PCallinstr)nodeArrayList1.get(0);

        pinstrNode1 = new ACallinstrInstr(pcallinstrNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ARetinstrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PRetinstr pretinstrNode2;
        pretinstrNode2 = (PRetinstr)nodeArrayList1.get(0);

        pinstrNode1 = new ARetinstrInstr(pretinstrNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AWriteinstrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PWriteinstr pwriteinstrNode2;
        pwriteinstrNode2 = (PWriteinstr)nodeArrayList1.get(0);

        pinstrNode1 = new AWriteinstrInstr(pwriteinstrNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AEmptyinstrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PEmptyinstr pemptyinstrNode2;
        pemptyinstrNode2 = (PEmptyinstr)nodeArrayList1.get(0);

        pinstrNode1 = new AEmptyinstrInstr(pemptyinstrNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AInstrblocInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PInstrbloc pinstrblocNode2;
        pinstrblocNode2 = (PInstrbloc)nodeArrayList1.get(0);

        pinstrNode1 = new AInstrblocInstr(pinstrblocNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAssinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssinstr passinstrNode1;
        {
            // Block
        PVar pvarNode2;
        TEquals tequalsNode3;
        PExp pexpNode4;
        TSemicolon tsemicolonNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        passinstrNode1 = new AAssinstr(pvarNode2, tequalsNode3, pexpNode4, tsemicolonNode5);
        }
	nodeList.add(passinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIfinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfinstr pifinstrNode1;
        {
            // Block
        TIf tifNode2;
        PExp pexpNode3;
        TThen tthenNode4;
        PInstrbloc pinstrblocNode5;
        PIfinstrbis pifinstrbisNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pinstrblocNode5 = (PInstrbloc)nodeArrayList4.get(0);
        pifinstrbisNode6 = (PIfinstrbis)nodeArrayList5.get(0);

        pifinstrNode1 = new AIfinstr(tifNode2, pexpNode3, tthenNode4, pinstrblocNode5, pifinstrbisNode6);
        }
	nodeList.add(pifinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AElseIfinstrbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfinstrbis pifinstrbisNode1;
        {
            // Block
        TElse telseNode2;
        PInstrbloc pinstrblocNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pinstrblocNode3 = (PInstrbloc)nodeArrayList2.get(0);

        pifinstrbisNode1 = new AElseIfinstrbis(telseNode2, pinstrblocNode3);
        }
	nodeList.add(pifinstrbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANoelseIfinstrbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PIfinstrbis pifinstrbisNode1;
        {
            // Block

        pifinstrbisNode1 = new ANoelseIfinstrbis();
        }
	nodeList.add(pifinstrbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AWhileinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileinstr pwhileinstrNode1;
        {
            // Block
        TWhile twhileNode2;
        PExp pexpNode3;
        TDo tdoNode4;
        PInstrbloc pinstrblocNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pinstrblocNode5 = (PInstrbloc)nodeArrayList4.get(0);

        pwhileinstrNode1 = new AWhileinstr(twhileNode2, pexpNode3, tdoNode4, pinstrblocNode5);
        }
	nodeList.add(pwhileinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACallinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallinstr pcallinstrNode1;
        {
            // Block
        PCall pcallNode2;
        TSemicolon tsemicolonNode3;
        pcallNode2 = (PCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcallinstrNode1 = new ACallinstr(pcallNode2, tsemicolonNode3);
        }
	nodeList.add(pcallinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ACall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PListofexp plistofexpNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plistofexpNode4 = (PListofexp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pcallNode1 = new ACall(tidNode2, tlparNode3, plistofexpNode4, trparNode5);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ARetinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetinstr pretinstrNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pretinstrNode1 = new ARetinstr(treturnNode2, pexpNode3, tsemicolonNode4);
        }
	nodeList.add(pretinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AWriteinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriteinstr pwriteinstrNode1;
        {
            // Block
        TWrite twriteNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pwriteinstrNode1 = new AWriteinstr(twriteNode2, tlparNode3, pexpNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pwriteinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AEmptyinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEmptyinstr pemptyinstrNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pemptyinstrNode1 = new AEmptyinstr(tsemicolonNode2);
        }
	nodeList.add(pemptyinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AInstrbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrbloc pinstrblocNode1;
        {
            // Block
        TLCurbrac tlcurbracNode2;
        PInstrblocbis pinstrblocbisNode3;
        TRCurbrac trcurbracNode4;
        tlcurbracNode2 = (TLCurbrac)nodeArrayList1.get(0);
        pinstrblocbisNode3 = (PInstrblocbis)nodeArrayList2.get(0);
        trcurbracNode4 = (TRCurbrac)nodeArrayList3.get(0);

        pinstrblocNode1 = new AInstrbloc(tlcurbracNode2, pinstrblocbisNode3, trcurbracNode4);
        }
	nodeList.add(pinstrblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AInstrInstrblocbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrblocbis pinstrblocbisNode1;
        {
            // Block
        PInstr pinstrNode2;
        PInstrblocbis pinstrblocbisNode3;
        pinstrNode2 = (PInstr)nodeArrayList1.get(0);
        pinstrblocbisNode3 = (PInstrblocbis)nodeArrayList2.get(0);

        pinstrblocbisNode1 = new AInstrInstrblocbis(pinstrNode2, pinstrblocbisNode3);
        }
	nodeList.add(pinstrblocbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANoinstrInstrblocbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PInstrblocbis pinstrblocbisNode1;
        {
            // Block

        pinstrblocbisNode1 = new ANoinstrInstrblocbis();
        }
	nodeList.add(pinstrblocbisNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 4}, {1, SHIFT, 1}, {2, SHIFT, 2}, },
			{{-1, ERROR, 1}, {2, SHIFT, 9}, },
			{{-1, ERROR, 2}, {7, SHIFT, 10}, },
			{{-1, ERROR, 3}, {28, ACCEPT, -1}, },
			{{-1, REDUCE, 4}, {2, SHIFT, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 4}, {2, SHIFT, 2}, },
			{{-1, ERROR, 7}, {27, SHIFT, 14}, },
			{{-1, REDUCE, 10}, {26, SHIFT, 15}, },
			{{-1, REDUCE, 13}, {9, SHIFT, 17}, },
			{{-1, ERROR, 10}, {1, SHIFT, 1}, {8, SHIFT, 18}, },
			{{-1, ERROR, 11}, {1, SHIFT, 1}, {11, SHIFT, 20}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 15}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 17}, {0, SHIFT, 24}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 19}, {8, SHIFT, 25}, },
			{{-1, REDUCE, 60}, {2, SHIFT, 26}, {11, SHIFT, 20}, {18, SHIFT, 27}, {21, SHIFT, 28}, {23, SHIFT, 29}, {25, SHIFT, 30}, {27, SHIFT, 31}, },
			{{-1, ERROR, 21}, {11, SHIFT, 20}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 12}, {26, SHIFT, 15}, },
			{{-1, ERROR, 24}, {10, SHIFT, 46}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 15}, {7, SHIFT, 47}, {9, SHIFT, 48}, },
			{{-1, ERROR, 27}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 28}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 29}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 30}, {7, SHIFT, 63}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 32}, {15, SHIFT, 64}, },
			{{-1, REDUCE, 60}, {2, SHIFT, 26}, {11, SHIFT, 20}, {18, SHIFT, 27}, {21, SHIFT, 28}, {23, SHIFT, 29}, {25, SHIFT, 30}, {27, SHIFT, 31}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 38}, {27, SHIFT, 66}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 43}, {12, SHIFT, 67}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 48}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 50}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 51}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 52}, {7, SHIFT, 73}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 54}, {13, SHIFT, 74}, {19, SHIFT, 75}, },
			{{-1, REDUCE, 18}, {14, SHIFT, 76}, },
			{{-1, REDUCE, 20}, {15, SHIFT, 77}, {16, SHIFT, 78}, },
			{{-1, REDUCE, 23}, {3, SHIFT, 79}, {4, SHIFT, 80}, },
			{{-1, REDUCE, 26}, {5, SHIFT, 81}, {6, SHIFT, 82}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 61}, {13, SHIFT, 74}, {22, SHIFT, 83}, },
			{{-1, ERROR, 62}, {13, SHIFT, 74}, {27, SHIFT, 84}, },
			{{-1, ERROR, 63}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 64}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 39}, {13, SHIFT, 74}, {26, SHIFT, 87}, },
			{{-1, ERROR, 69}, {8, SHIFT, 89}, },
			{{-1, ERROR, 70}, {10, SHIFT, 90}, {13, SHIFT, 74}, },
			{{-1, ERROR, 71}, {8, SHIFT, 91}, {13, SHIFT, 74}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 73}, {8, SHIFT, 92}, },
			{{-1, ERROR, 74}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 75}, {11, SHIFT, 20}, },
			{{-1, ERROR, 76}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 77}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 78}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 79}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 80}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 81}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 82}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, ERROR, 83}, {11, SHIFT, 20}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 85}, {8, SHIFT, 103}, {13, SHIFT, 74}, },
			{{-1, ERROR, 86}, {13, SHIFT, 74}, {27, SHIFT, 104}, },
			{{-1, ERROR, 87}, {0, SHIFT, 49}, {2, SHIFT, 26}, {7, SHIFT, 50}, {17, SHIFT, 51}, {24, SHIFT, 52}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 17}, {14, SHIFT, 76}, },
			{{-1, REDUCE, 51}, {20, SHIFT, 106}, },
			{{-1, REDUCE, 19}, {15, SHIFT, 77}, {16, SHIFT, 78}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 79}, {4, SHIFT, 80}, },
			{{-1, REDUCE, 22}, {3, SHIFT, 79}, {4, SHIFT, 80}, },
			{{-1, REDUCE, 24}, {5, SHIFT, 81}, {6, SHIFT, 82}, },
			{{-1, REDUCE, 25}, {5, SHIFT, 81}, {6, SHIFT, 82}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 103}, {27, SHIFT, 108}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 39}, {13, SHIFT, 74}, {26, SHIFT, 87}, },
			{{-1, ERROR, 106}, {11, SHIFT, 20}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 50}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {11, 21}, },
			{{-1, 5}, {4, 12}, {6, 13}, },
			{{-1, 6}, },
			{{-1, 11}, },
			{{-1, 7}, {10, 19}, },
			{{-1, 16}, {23, 45}, },
			{{-1, 8}, {15, 23}, },
			{{-1, 53}, {20, 32}, {33, 32}, },
			{{-1, 54}, {28, 61}, {29, 62}, {47, 68}, {48, 70}, {50, 71}, {63, 85}, {64, 86}, {87, 105}, },
			{{-1, 55}, {74, 93}, },
			{{-1, 56}, {76, 95}, },
			{{-1, 57}, {77, 96}, {78, 97}, },
			{{-1, 58}, {79, 98}, {80, 99}, },
			{{-1, 59}, {51, 72}, {81, 100}, {82, 101}, },
			{{-1, 69}, },
			{{-1, 88}, {105, 109}, },
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 35}, },
			{{-1, 107}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 60}, {20, 38}, {33, 38}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 42}, {11, 22}, {21, 44}, {75, 94}, {83, 102}, {106, 110}, },
			{{-1, 43}, {33, 65}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', id, EOF",
			"expecting: id",
			"expecting: '('",
			"expecting: EOF",
			"expecting: id, EOF",
			"expecting: ';'",
			"expecting: ')', ',', ';'",
			"expecting: ')', '[', ',', ';'",
			"expecting: 'entier', ')'",
			"expecting: 'entier', '{'",
			"expecting: id, '{', EOF",
			"expecting: 'entier'",
			"expecting: ')', ';'",
			"expecting: number",
			"expecting: ')'",
			"expecting: id, '{', '}', 'si', 'tantque', 'retour', 'ecrire', ';'",
			"expecting: '{'",
			"expecting: ']'",
			"expecting: '+', '-', '*', '/', '(', ')', '[', ']', '|', '&', '=', '<', 'alors', 'faire', ',', ';'",
			"expecting: number, id, '(', '!', 'lire'",
			"expecting: '='",
			"expecting: '}'",
			"expecting: number, id, '(', ')', '!', 'lire'",
			"expecting: '+', '-', '*', '/', ')', ']', '|', '&', '=', '<', 'alors', 'faire', ',', ';'",
			"expecting: '|', 'alors'",
			"expecting: ')', ']', '|', '&', 'alors', 'faire', ',', ';'",
			"expecting: ')', ']', '|', '&', '=', '<', 'alors', 'faire', ',', ';'",
			"expecting: '+', '-', ')', ']', '|', '&', '=', '<', 'alors', 'faire', ',', ';'",
			"expecting: '|', 'faire'",
			"expecting: '|', ';'",
			"expecting: id, '{', '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', ';', EOF",
			"expecting: ')', '|', ','",
			"expecting: ']', '|'",
			"expecting: ')', '|'",
			"expecting: id, '{', '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 9, 3, 3, 10, 11, 12, 13, 9, 14, 15, 16, 4, 6, 17, 9, 18, 19, 19, 19, 2, 15, 20, 15, 15, 15, 15, 15, 5, 15, 15, 15, 15, 21, 4, 12, 6, 22, 19, 23, 19, 19, 2, 23, 24, 25, 26, 27, 23, 23, 23, 28, 29, 19, 19, 21, 15, 30, 31, 14, 32, 33, 23, 14, 19, 16, 19, 19, 19, 19, 19, 19, 19, 16, 15, 33, 29, 19, 14, 23, 23, 23, 23, 25, 34, 26, 27, 27, 23, 23, 23, 23, 15, 5, 15, 31, 16, 15, 15, 14, 15, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
