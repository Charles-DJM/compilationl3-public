/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAOptvardeclistProgram(AOptvardeclistProgram node);
    void caseAFoncdeclistProgram(AFoncdeclistProgram node);
    void caseAOptvardeclist(AOptvardeclist node);
    void caseAOneormoreFoncdeclist(AOneormoreFoncdeclist node);
    void caseALastFoncdeclist(ALastFoncdeclist node);
    void caseAWithvardecFoncdec(AWithvardecFoncdec node);
    void caseANovardecFoncdec(ANovardecFoncdec node);
    void caseAWithparamParamlist(AWithparamParamlist node);
    void caseAWithoutparamParamlist(AWithoutparamParamlist node);
    void caseAMorethanoneVardeclist(AMorethanoneVardeclist node);
    void caseAOneVardeclist(AOneVardeclist node);
    void caseAMoreVardeclistbis(AMoreVardeclistbis node);
    void caseALastVardeclistbis(ALastVardeclistbis node);
    void caseAIntVardec(AIntVardec node);
    void caseAInttableVardec(AInttableVardec node);
    void caseAVarVar(AVarVar node);
    void caseATableVar(ATableVar node);
    void caseAOrExp(AOrExp node);
    void caseAExp1Exp(AExp1Exp node);
    void caseAAndExp1(AAndExp1 node);
    void caseAExp2Exp1(AExp2Exp1 node);
    void caseAEqualsExp2(AEqualsExp2 node);
    void caseAInfExp2(AInfExp2 node);
    void caseAExp3Exp2(AExp3Exp2 node);
    void caseAPlusExp3(APlusExp3 node);
    void caseAMinusExp3(AMinusExp3 node);
    void caseAExp4Exp3(AExp4Exp3 node);
    void caseAMultExp4(AMultExp4 node);
    void caseADivExp4(ADivExp4 node);
    void caseAExp5Exp4(AExp5Exp4 node);
    void caseANotExp5(ANotExp5 node);
    void caseAParenthesisExp5(AParenthesisExp5 node);
    void caseANumberExp5(ANumberExp5 node);
    void caseACallExp5(ACallExp5 node);
    void caseAVarExp5(AVarExp5 node);
    void caseAReadExp5(AReadExp5 node);
    void caseAMorethanoneListofexp(AMorethanoneListofexp node);
    void caseANoneListofexp(ANoneListofexp node);
    void caseAMoreListofexpbis(AMoreListofexpbis node);
    void caseALastListofexpbis(ALastListofexpbis node);
    void caseAAssinstrInstr(AAssinstrInstr node);
    void caseAIfinstrInstr(AIfinstrInstr node);
    void caseAWhileinstrInstr(AWhileinstrInstr node);
    void caseACallinstrInstr(ACallinstrInstr node);
    void caseARetinstrInstr(ARetinstrInstr node);
    void caseAWriteinstrInstr(AWriteinstrInstr node);
    void caseAEmptyinstrInstr(AEmptyinstrInstr node);
    void caseAInstrblocInstr(AInstrblocInstr node);
    void caseAAssinstr(AAssinstr node);
    void caseAIfthenIfinstr(AIfthenIfinstr node);
    void caseAIfthenelseIfinstr(AIfthenelseIfinstr node);
    void caseAElseinstr(AElseinstr node);
    void caseAWhileinstr(AWhileinstr node);
    void caseACallinstr(ACallinstr node);
    void caseACall(ACall node);
    void caseARetinstr(ARetinstr node);
    void caseAWriteinstr(AWriteinstr node);
    void caseAEmptyinstr(AEmptyinstr node);
    void caseAInstrbloc(AInstrbloc node);
    void caseAInstrInstrblocbis(AInstrInstrblocbis node);
    void caseANoinstrInstrblocbis(ANoinstrInstrblocbis node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrac(TLBrac node);
    void caseTRBrac(TRBrac node);
    void caseTLCurbrac(TLCurbrac node);
    void caseTRCurbrac(TRCurbrac node);
    void caseTOr(TOr node);
    void caseTAnd(TAnd node);
    void caseTEquals(TEquals node);
    void caseTInf(TInf node);
    void caseTNot(TNot node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTInt(TInt node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTReturn(TReturn node);
    void caseTRead(TRead node);
    void caseTWrite(TWrite node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
